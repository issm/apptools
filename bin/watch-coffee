#!/usr/bin/env perl
use 5.10.0;
use warnings;
use utf8;
use FindBin;
use Filesys::Notify::Simple;
use Time::Piece;
use File::Basename;
use File::Temp qw/tempdir/;
use File::Find;

$ENV{PERL_FNS_NO_OPT} = 1;

my ($app_name) = @ARGV;

unless ( $app_name ) {
    print << "...";
Usage:
    $0 <app_name>
...
    exit 1;
}

my $COFFEE = 'coffee';

my $basedir   = "${FindBin::Bin}/..";  do 1 while ( $basedir =~ s!/[^./]+/\.\.!! );
my $coffeedir = "${basedir}/coffee/${app_name}";
my $jsdir     = "${basedir}/static/${app_name}/js";

my $tempdir = tempdir( CLEANUP => 1 );
my $stdout  = "$tempdir/stdout";
my $stderr  = "$tempdir/stderr";

my @dirs = (
    "${basedir}/coffee/${app_name}/inc",
    "${basedir}/coffee/${app_name}/p",
);

sub printlog {
    my ($msg) = @_;
    printf STDERR '[%s] %s', localtime->datetime, $msg;
    print "\n";
}

sub find_deps {
    my ($rule, $ev) = @_;
    my @ret;
    (my $key = $ev->{name}) =~ s!^p/!!;
    if ( $ev->{type} eq 'p' ) {
        # 依存先のリスト
        @ret = @{ $rule->{$key} // [] };
    }
    elsif ( $ev->{type} eq 'inc' ) {
        # 被依元のリスト
        for my $k ( keys %$rule ) {
            if ( grep $_ eq $key, @{ $rule->{$k} // [] } ) {
                push @ret, "p/$k";
                next;
            }
        }
    }
    return @ret;
}

sub compile {
    my ($p, @inc) = @_;
    my ($dst, @src);
    ($dst = $p) =~ s!p/!!;
    $dst = sprintf '%s/%s.js', $jsdir, $dst;
    @src = grep {
        printlog "[33mfile does not exit, ignore: $_[0m"  if ! -f;
        -f;
    } map {
        sprintf '%s/%s.coffee', $coffeedir, $_;
    } (@inc, $p);

    my $cmd = "$COFFEE -j $dst -c @src";
    execute($cmd);
}

sub execute {
    my ($cmd) = @_;
    printlog "[35m$cmd[0m";
    system("$cmd > $stdout 2> $stderr");
    if ( $? ) {
        my $err = do { local $/; open my $fh, '<', $stderr; <$fh> };
        printf STDERR "[31m${err}[0m"  if $err;
    }
}

my $watcher = Filesys::Notify::Simple->new(\@dirs);

printlog 'start watching.';
while ( 1 ) {
    $watcher->wait(
        sub {
            my $deps = do "$coffeedir/.deps.pl" || +{};

            my @evs = grep {
                $_->{basename} ne ''  &&  $_->{basename} !~ /^(#|\.#)/;
            } map {
                #(my $name = $_->{path}) =~ s!${basedir}/coffee/${app_name}!!;
                (my $name = $_->{path}) =~ s!$coffeedir!!;
                $name =~ s!(^/|\.coffee$)!!g;
                my ($type, $basename) = split m!/!, $name;
                @$_{qw/name type basename/} = ( $name, $type, basename($basename // '', ('.coffee')) );
                $_;
            } grep {
                -f $_->{path};
            } @_;
            for my $ev ( @evs ) {
                printlog sprintf( '-- %s', $ev->{name} );
            }

            my (@inc, @p);
            for my $ev ( @evs ) {
                push @inc, $ev  if $ev->{type} eq 'inc';
                push @p, $ev    if $ev->{type} eq 'p';
            }

            if ( @p ) {
                while ( my $ev = shift @p ) {
                    compile( $ev->{name}, find_deps($deps, $ev) );
                }
            }
            elsif ( @inc ) {
                my @p;
                while ( my $ev = shift @inc ) {
                    push @p, find_deps($deps, $ev);
                }
                @p = do { my %c; grep !$c{$_}++, @p };
                while ( my $p = shift @p ) {
                    compile( $p, find_deps($deps, { type => 'p', name => $p }) );
                }
            }
        },
    );
}
printlog 'done.';
